name: UnifiedAI CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y coreutils
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Remove any Docker containers using port 6379
        run: |
          docker ps -q --filter "publish=6379" | xargs -r docker rm -f || true
          docker ps -q --filter "expose=6379" | xargs -r docker rm -f || true
          docker ps -a --filter "status=exited" | xargs -r docker rm || true
      - name: Stop Redis service (Ubuntu)
        run: |
          sudo service redis-server stop || true
          sudo systemctl stop redis-server || true
          sudo killall redis-server || true
      - name: Stop Redis service (macOS CI runners)
        if: runner.os == 'macOS'
        run: |
          brew services stop redis || true
          pkill redis-server || true
      - name: Ensure port 6379 is completely free
        run: |
          # Check if port is still in use
          if sudo lsof -i :6379; then
            echo "Process still using port 6379, forcefully killing..."
            sudo lsof -i :6379 | awk 'NR!=1 {print $2}' | xargs -r sudo kill -9
            sleep 2
          fi
          
          # Verify port is free
          if sudo lsof -i :6379; then
            echo "WARNING: Port 6379 is still in use. Attempting one more forceful cleanup."
            sudo lsof -i :6379 | awk 'NR!=1 {print $2}' | xargs -r sudo kill -9
            docker ps -q --filter 'publish=6379' | xargs -r docker rm -f
          else
            echo "Port 6379 is free and ready for use"
          fi
      - name: Run tests
        run: |
          chmod +x ./test-docker.sh
          ./test-docker.sh
      - name: Generate test coverage
        run: |
          pytest --cov=. tests/
