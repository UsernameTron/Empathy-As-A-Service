# Docker Compose for Unified Meld & RAG System
# Orchestrates the web application with Redis for session management

services:
  # Redis for session management and caching
  redis:
    image: redis:7.2-alpine
    container_name: meldrag-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      sh -c "if [ ! -z \"$${REDIS_PASSWORD}\" ]; then
        redis-server --requirepass \"$${REDIS_PASSWORD}\" --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --protected-mode no --bind 0.0.0.0;
      else
        redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --protected-mode no --bind 0.0.0.0;
      fi"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - meldrag-network

  # Main unified web application
  app:
    build: 
      context: .
      target: production
    container_name: meldrag-app
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      # Flask configuration
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      
      # OpenAI API configuration (required)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - SESSION_TYPE=redis
      
      # ChromaDB configuration
      - CHROMA_PERSIST_DIRECTORY=/app/chroma_db
      
      # Application settings
      - PYTHONPATH=/app:/app/VectorDBRAG:/app/agent_system:/app/shared_agents
      - TZ=UTC
      
      # Performance settings
      - WEB_CONCURRENCY=4
      - MAX_WORKERS=4
      - TIMEOUT=300
      
    volumes:
      # Persistent storage for ChromaDB
      - chroma_data:/app/chroma_db
      # Session storage (filesystem fallback)
      - session_data:/app/flask_session
      # Application logs
      - ./logs:/app/logs
      # Optional: mount .env file for local development
      - ./VectorDBRAG/.env:/app/VectorDBRAG/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - meldrag-network
    labels:
      - "com.meldrag.service=app"
      - "com.meldrag.version=2.0.0"

  # Development override service
  app-dev:
    build: 
      context: .
      target: development
    container_name: meldrag-app-dev
    restart: "no"
    ports:
      - "5001:5001"
    environment:
      # Development configuration
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      
      # OpenAI API configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Redis configuration (optional for dev)
      - REDIS_URL=redis://redis:6379/0
      - SESSION_TYPE=filesystem
      
      # ChromaDB configuration
      - CHROMA_PERSIST_DIRECTORY=/app/chroma_db
      
      # Development settings
      - PYTHONPATH=/app:/app/VectorDBRAG:/app/agent_system:/app/shared_agents
      - TZ=UTC
      
    volumes:
      # Live code mounting for development
      - ./VectorDBRAG:/app/VectorDBRAG
      - ./agent_system:/app/agent_system
      - ./shared_agents:/app/shared_agents
      - ./start_unified_interface.py:/app/start_unified_interface.py
      # Persistent data
      - chroma_data:/app/chroma_db
      - session_data:/app/flask_session
      - ./logs:/app/logs
      # Environment file
      - ./VectorDBRAG/.env:/app/VectorDBRAG/.env:ro
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - development
    networks:
      - meldrag-network

# Named volumes for persistent data
volumes:
  redis_data:
    driver: local
    labels:
      - "com.meldrag.volume=redis-data"
  
  chroma_data:
    driver: local
    labels:
      - "com.meldrag.volume=chroma-data"
      
  session_data:
    driver: local
    labels:
      - "com.meldrag.volume=session-data"

# Network for service communication
networks:
  meldrag-network:
    driver: bridge
    labels:
      - "com.meldrag.network=main"
